{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>XspecT is a Python-based tool to taxonomically classify sequence-reads (or assembled genomes) on the species and/or MLST level using kmer indices and a Support Vector Machine.</p> <p>XspecT utilizes the uniqueness of kmers and compares extracted kmers from the input-data to a kmer index. Probablistic data structures ensure a fast lookup in this process. For a final prediction, the results are classified using a Support Vector Machine.</p> <p>The tool is available as a web-based application and as a command line interface.</p> <p>Get started</p>"},{"location":"benchmark/","title":"Benchmark","text":"<p>To benchmark XspecT performance, you can use the Nextflow workflow provided in the <code>scripts/benchmark</code> directory. This workflow allows you to run XspecT on a set of samples and measure species classification accuracy on both whole genomes, as well as on simulated reads.</p> <p>Before you run the benchmark, you first need to get benchmarking data, for example from NCBI. To do so, you can use the bash script in <code>scripts/benchmark-data</code> to download the data using the NCBI Datasets CLI, which needs to be installed first. The script will download all available Acinetobacter genomes, as well as taxonomic data.</p> <p>To run the benchmark, install Nextflow and run the following command:</p> <pre><code>nextflow run scripts/benchmark\n</code></pre> <p>This will execute the benchmark workflow, which will classify the samples, as well as reads generated from them, using XspecT. The results will be saved in the <code>results</code> directory:</p> <ul> <li><code>results/classifications.tsv</code> for the classifications of the whole genomes</li> <li><code>results/read_classifications.tsv</code> for the classifications of the simulated reads</li> <li><code>results/confusion_matrix.png</code> for the confusion matrix of whole genome classifications</li> <li><code>results/mismatches_confusion_matrix.png</code> for a confusion matrix filtered on mismatches of whole genome classifications</li> <li><code>results/stats.txt</code> for the statistics of the benchmark run</li> </ul>"},{"location":"cli/","title":"How to use the CLI","text":"<p>XspecT comes with a built-in command line interface (CLI), which enables quick classifications without the need to use the web interface. The command line interface can also be used to download and train models.</p> <p>After installing XspecT, a list of available commands can be viewed by running:</p> <pre><code>xspect --help\n</code></pre> <p>In general, XspecT commands will prompt you for parameters if they are not provided. However, you can also provide them directly in the command line, for example when using scripts or tools such as Slurm. Simply run the command with the <code>--help</code> option to see all available parameters.</p>"},{"location":"cli/#model-management","title":"Model Management","text":"<p>At its core, XspecT uses models to classify and filter samples. These models are based on kmer indices trained on publicly available genomes as well as, possibly, a support vector machine (SVM) classifier.</p> <p>To manage models, the <code>xspect models</code> command can be used. This command allows you to download, train, and view available models.</p>"},{"location":"cli/#viewing-available-models","title":"Viewing Available Models","text":"<p>To view a list of available models, run:</p> <pre><code>xspect models list\n</code></pre> <p>This will show a list of all available models, separated by their type (species, genus, MLST).</p>"},{"location":"cli/#downloading-models","title":"Downloading Models","text":"<p>To download a basic set of pre-trained models (Acinetobacter and Salonella), run:</p> <pre><code>xspect models download\n</code></pre>"},{"location":"cli/#model-training","title":"Model Training","text":"<p>Models can be trained based on data from NCBI, which is automatically downloaded and processed by XspecT.</p> <p>To train a model with NCBI data, run the following command:</p> <pre><code>xspect models train ncbi\n</code></pre> <p>If you would like to train models with manually curated data from a directory, you can use:</p> <pre><code>xspect models train directory\n</code></pre> <p>Your directory should have the following structure:</p> <pre><code>your-directory/\n\u251c\u2500\u2500 cobs\n\u2502   \u251c\u2500\u2500 species1\n\u2502   \u2502   \u251c\u2500\u2500 genome1.fna\n\u2502   \u2502   \u251c\u2500\u2500 genome2.fna\n\u2502   \u2502   \u2514\u2500\u2500 ...\n\u2502   \u251c\u2500\u2500 species2\n\u2502   \u2502   \u251c\u2500\u2500 genome1.fna\n\u2502   \u2502   \u251c\u2500\u2500 genome2.fna\n\u2502   \u2502   \u2514\u2500\u2500 ...\n\u2502   \u2514\u2500\u2500 ...\n\u251c\u2500\u2500 svm\n\u2502   \u251c\u2500\u2500 species1\n\u2502   \u2502   \u251c\u2500\u2500 genome1.fna\n\u2502   \u2502   \u251c\u2500\u2500 genome2.fna\n\u2502   \u2502   \u2514\u2500\u2500 ...\n\u2502   \u251c\u2500\u2500 species2\n\u2502   \u2502   \u251c\u2500\u2500 genome1.fna\n\u2502   \u2502   \u251c\u2500\u2500 genome2.fna\n\u2502   \u2502   \u2514\u2500\u2500 ...\n\u2502   \u2514\u2500\u2500 ...\n</code></pre> <p>To train models for MLST classifications, run:</p> <pre><code>xspect models train mlst\n</code></pre>"},{"location":"cli/#classification","title":"Classification","text":"<p>To classify samples, the command <code>xspect classify</code> can be used. This command will classify the sample based on the models available in your XspecT installation.</p>"},{"location":"cli/#genus-classification","title":"Genus Classification","text":"<p>To classify a sample based on its genus, run the following command:</p> <pre><code>xspect classify genus\n</code></pre> <p>XspecT will prompt you for the genus and path to your sample directory.</p>"},{"location":"cli/#species-classification","title":"Species Classification","text":"<p>To classify a sample based on its species, run the following command:</p> <pre><code>xspect classify species\n</code></pre> <p>XspecT will prompt you for the genus and path to your sample directory.</p>"},{"location":"cli/#sparse-sampling","title":"Sparse Sampling","text":"<p>XspecT uses a kmer-based approach to classify samples. This means that the entire sample is analyzed, which can be time-consuming for large samples. To speed up the analysis, you can use the <code>--sparse-sampling-step</code> option to only consider every nth kmer:</p> <p>Example:</p> <pre><code>xspect classify species --sparse-sampling-step 10 Acinetobacter path\n</code></pre> <p>This will only consider every 10th kmer in the sample.</p>"},{"location":"cli/#mlst-classification","title":"MLST Classification","text":"<p>Samples can also be classified based on Multi-locus sequence type schemas. To MLST-classify a sample, run:</p> <pre><code>xspect classify mlst\n</code></pre>"},{"location":"cli/#filtering","title":"Filtering","text":"<p>XspecT can also be used to filter samples based on their classification results. This is useful when analyzing metagenomic samples, for example when looking at genomic bycatch.</p> <p>To filter samples, the command <code>xspect filter</code> can be used. This command will filter the samples based on the specified criteria.</p>"},{"location":"cli/#filtering-by-genus","title":"Filtering by Genus","text":"<p>To filter samples by genus, run the following command:</p> <pre><code>xspect filter genus\n</code></pre> <p>XspecT will prompt you for the genus and path to your sample directory, as well as for a threshold to use for filtering.</p>"},{"location":"cli/#filtering-by-species","title":"Filtering by Species","text":"<p>To filter samples by species, run the following command:</p> <pre><code>xspect filter species\n</code></pre> <p>You will be prompted for the genus and path to your sample directory, as well for the species to filter by and for a threshold to use for filtering. Next to normal threshold-based filtering, you can also enter a threshold of <code>-1</code> to only include contigs if the selected species is the maximum scoring species.</p>"},{"location":"contributing/","title":"Contributing to XspecT","text":""},{"location":"contributing/#introduction","title":"Introduction","text":"<p>Thank you for your interest in contributing to XspecT! This page provides guidelines for contributing to the project, including how to set up your own development environment, the XspecT architecture, CI/CD, and the process for submitting contributions.</p> <p>When contributing to XspecT, please follow the following steps to ensure a smooth process:</p> <ul> <li>Read the documentation: Familiarize yourself with the project by reading the documentation, including the Understanding XspecT page and the architecture overview.</li> <li>Follow the coding standards: Adhere to the project's coding standards and best practices. This includes using consistent naming conventions, writing clear and concise code, and documentation. Furthermore, please make sure your changes are algined with the project's architecture.</li> <li>Write tests: Ensure that your changes are covered by tests. We use pytest for testing. If you add new features or fix bugs, please include tests to verify your changes.</li> <li>Document your changes: Update the documentation to reflect any new features or changes you make. This includes updating the README, Google-style docstrings, and the Mkdocs-based documentation.</li> <li>Use clear commit messages: When committing your changes, use clear and descriptive commit messages that explain the purpose of the changes.</li> <li>Follow the pull request process: When you're ready to submit your changes, follow the pull request process outlined below.</li> </ul>"},{"location":"contributing/#development-installation","title":"Development Installation","text":"<p>To set up XspecT for development, first make sure you have Python and Node.js installed. Please note that XspecT is currently not supported in Windows or Alpine Linux environments, unless you build COBS yourself.</p> <p>Get started by cloning the repository:</p> <pre><code>git clone https://github.com/BIONF/XspecT2.git\n</code></pre> <p>You then need to build the web application using Vite. Navigate to the <code>xspect-web</code> directory and run the build command, which will also watch for changes:</p> <pre><code>cd XspecT2/src/xspect/xspect-web\n</code></pre> <pre><code>npx vite build --watch\n</code></pre> <p>Finally, in a separate terminal, navigate to the root of the cloned repository and install the Python package in editable mode:</p> <pre><code>pip install -e .\n</code></pre> <p>By combining the two processes, you can develop both the frontend and backend simultaneously.</p>"},{"location":"contributing/#architecture-overview","title":"Architecture Overview","text":"<p>XspecT consists of a Python component (<code>src/xspect</code>) and a web application built with Vite (<code>src/xspect/xspect-web</code>). The Python component provides the core functionality, including the command-line interface (CLI) and the backend API, while the web application provides a user-friendly interface for interacting with XspecT. Furthermore, tests for the Python component reside in the <code>tests/</code> directory, while documentation is provided in the <code>docs/</code> directory.</p>"},{"location":"contributing/#python-component","title":"Python Component","text":"<p>The Python component of XspecT is structured as follows:</p> <ul> <li><code>main.py</code>: The entry point for the command-line interface (CLI) and the backend API.</li> <li><code>web.py</code>: The FastAPI application that serves the web interface and handles API requests.</li> </ul> <p>The core functionality of XspecT is implemented using the following modules:</p> <ul> <li><code>classify.py</code>: Contains methods to classify sequences based on previously trained XspecT models.</li> <li><code>filter_sequences.py</code>: Contains methods to filter sequences based on classification results.</li> <li><code>model_management.py</code>: Contains methods to manage XspecT models.</li> <li><code>train.py</code>: Contains methods to train XspecT models based on user-provided data or data from the NCBI/PubMLST API.</li> <li><code>download_models.py</code>: Contains methods to download pre-trained XspecT models.</li> </ul> <p>In the background, these modules utilize model classes and a result class, which are defined in the <code>/models/</code> folder.</p> <ul> <li><code>/models/probabilistic_filter_model.py</code>: Base class for probabilistic filter models, which uses COBS indices for classification and stores the model's metadata. Results from the classification are stored in a <code>ModelResult</code> class.</li> <li><code>/models/probabilistic_filter_svm_model.py</code>: This class extends the base model class and implements a probabilistic filter model, in which classification scores are passed to a support vector machine (SVM) for a final prediction. This model is typically used for species-level classification.</li> <li><code>/models/probabilistic_filter_mlst_model.py</code>: This class extends the base model class and implements multilocus strain typing (MLST) by using multiple COBS indices.</li> <li><code>/models/probabilistic_single_filter_model.py</code>: This class extends the base model class and implements a model that uses a single Bloom filter for classification. It is typically used for genus-level classification.</li> <li><code>/models/result.py</code>: Contains the <code>ModelResult</code> class, which stores the results of a classification operation, including classification metadata, hits, and a prediction, if applicable.</li> </ul> <p>Supplementary modules are documented in their respective files.</p>"},{"location":"contributing/#web-application","title":"Web Application","text":"<p>The web application (<code>src/xspect/xspect-web</code>) is built using Vite, Axios, Tailwind CSS, and shadcn/ui. It provides a user-friendly interface for interacting with XspecT and includes the following main components:</p> <ul> <li><code>src/api.ts</code>: Contains the API client for making requests to the backend FastAPI application.</li> <li><code>src/App.tsx</code>: The main application component that renders the user interface. It uses React Router for navigation and includes the main layout as well as routing logic.</li> <li><code>src/assets/</code>: Contains static assets such as images and icons.</li> <li><code>src/components/</code>: Contains reusable components for the user interface, such as buttons, forms, and modals.</li> <li><code>src/components/ui/</code>: Contains UI components from shadcn/ui, which are used to build the user interface.</li> <li><code>src/types.ts</code>: Contains TypeScript type definitions for the application, including types for API responses.</li> <li><code>vite.config.ts</code>: The Vite configuration file that defines how the web application is built and served. Also includes a configuration for the API proxy to the FastAPI backend.</li> </ul>"},{"location":"contributing/#continuous-integration-and-deployment","title":"Continuous Integration and Deployment","text":"<p>We use GitHub Actions to run checks on commits and pull requests. These checks include:</p> <ul> <li>Code style and formatting: Ensures that changes align with the project's code style. We use Black for Python code formatting.</li> <li>Linting: Pylint is used for Python code linting. It checks for coding standards, potential errors, and code smells.</li> <li>Tests: Ensures that all tests pass. We use pytest for testing.</li> </ul> <p>Additionally, Github Actions are also used for deployment:</p> <ul> <li>Documentation: The Mkdocs-based documentation is built and deployed to GitHub Pages on changes to the <code>main</code> branch. You can view the documentation at https://bionf.github.io/XspecT2/.</li> <li>Python package: The Python package is built and uploaded to PyPI when a new release is created. This allows users to easily install the latest version of XspecT using <code>pip install xspect</code>. Pre-releases are uploaded to TestPyPI and can be installed using <code>pip install --index-url https://test.pypi.org/simple/ xspect</code>.</li> </ul>"},{"location":"contributing/#pull-request-process","title":"Pull Request Process","text":"<p>Once you have made your changes and tested them, you can submit a pull request. Please follow these steps:</p> <ol> <li>Ensure your code is up to date with the <code>dev</code> branch</li> <li>Create a pull request with a clear description of your changes to the <code>dev</code> branch</li> <li>Address any feedback from reviewers</li> <li>Once approved, your changes will be merged</li> </ol>"},{"location":"quickstart/","title":"Quickstart","text":""},{"location":"quickstart/#installation","title":"Installation","text":"<p>To install XspecT, please download the lastest 64 bit Python version and install the package using pip:</p> <pre><code>pip install xspect\n</code></pre> <p>Please note that Windows and Alpine Linux are currently not supported.</p>"},{"location":"quickstart/#usage","title":"Usage","text":""},{"location":"quickstart/#get-the-models","title":"Get the models","text":"<p>To download basic pre-trained models, you can use the built-in command:</p> <pre><code>xspect models download\n</code></pre> <p>Additional species models can be trained using:</p> <pre><code>xspect models train ncbi\n</code></pre>"},{"location":"quickstart/#how-to-run-the-web-app","title":"How to run the web app","text":"<p>To run the web app, simply execute:</p> <pre><code>xspect web\n</code></pre> <p>This will start a local web server. You can access the web app by navigating to <code>http://localhost:8000</code> in your web browser.</p>"},{"location":"quickstart/#how-to-use-the-xspect-command-line-interface","title":"How to use the XspecT command line interface","text":"<p>To use the XspecT command line interface, execute <code>xspect</code> with the desired subcommand and parameters.</p> <p>Example:</p> <pre><code>xspect classify species\n</code></pre> <p>If you do not provide the required parameters, the command line interface will prompt you for them. For further instructions on how to use the command line interface, please refer to the documentation or execute:</p> <pre><code>xspect --help\n</code></pre>"},{"location":"understanding/","title":"Understanding XspecT","text":""},{"location":"understanding/#what-is-xspect","title":"What is XspecT?","text":"<p>XspecT is a tool designed to monitor and characterize pathogens using exact pattern matching of kmers. It allows users to filter for pathogen sequences in metagenomic datasets, classify these sequences on a species level, and perform strain-level typing.</p>"},{"location":"understanding/#key-features","title":"Key Features","text":"<ul> <li>Genus-Level Classification: Classify sequences at the genus level, enabling researchers to quickly identify the presence of specific microbial groups.</li> <li>Species-Level Classification: Provides detailed classification of sequences at the species level, enhancing the understanding of microbial diversity.</li> <li>Multi-Locus Strain Typing: Offers the ability to type sequences at the strain level, which is crucial for understanding variations within species.</li> <li>Filtering: Classification results can be used to filter sequences, enabling analysis of metagenomic samples.</li> <li>Model Management: XspecT models can be easily downloaded or trained from scratch using the command line interface. Training is possible both from local data, as well as from the NCBI Datasets and PubMLST API.</li> <li>User-friendly Interface: Next to the command line interface (CLI), a React-based web interface is available for easy interaction and visualization of results.</li> <li>Works with Large Datasets: Entire folders of input data can be passed to the tool, allowing for efficient processing of large datasets.</li> </ul>"},{"location":"understanding/#how-xspect-works","title":"How XspecT Works","text":"<p>At its core, XspecT uses exact pattern matching of kmers to identify and classify sequences. The tool leverages indices of known pathogen sequences stored in XspecT models to match against input data. This process involves:</p> <ol> <li>Kmer Extraction: The input sequences are processed to extract kmers, which are short sequences of a fixed length.</li> <li>Pattern Matching: The extracted kmers are matched against an index of known sequences using exact matching algorithms. The number of matches is recorded, and stored as hits.</li> <li>Classification: Based on hits, scores are calculated as the fraction of kmers that match known sequences. These scores are then used to classify the sequences at different taxonomic levels.</li> </ol>"},{"location":"understanding/#cobs-index","title":"COBS Index","text":"<p>In order to store kmers in a space-efficient manner, XspecT uses a COBS (\"Compact Bit-Sliced Signature Index\") classic index. This index uses a probabilistic data structure to store kmers, allowing for efficient storage and retrieval. The COBS index is designed to handle large datasets while maintaining fast query performance. More information about the COBS index can be found in the COBS research paper.</p>"},{"location":"web/","title":"How to use the Web app","text":"<p>To run XspecT in a web browser, you can use the following command:</p> <pre><code>xspect web\n</code></pre> <p>This will start a web server running on port 8000. You can access the web app by navigating to http://localhost:8000 in your web browser.</p>"},{"location":"web/#web-app-features","title":"Web App Features","text":"<p>Within the web app, you can perform the following tasks:</p> <ul> <li>Upload samples for classification</li> <li>Submit samples for classification and view results</li> <li>Submit samples for filtering and view results</li> <li>Manage models</li> </ul>"}]}